- Null ppointer : stored a value like 0
- Wild pointer : any random address
- void pointer  : store address of any data type




// pointer within class 
#include<iostream>
using namespace std;
class Array {
    int *arr;
    int size;
    public:
    // here we are accessing the elemnts using pointers within a class 
    void getdata(int n){
        size  = n ;
        arr = new int (size);
        cout << "enetr elemnts: " ;
        for(int i = 0 ; i < size ; i++){
            cin >> *(arr+i);
            
        }
    }
    void add(){
        int sum = 0 ;
        for(int i = 0 ; i <  size ; i++){
            sum += *(arr+i);
        }
        cout << "sum of elemnts: " << sum ;
    }
};
int main(){
    Array a;
    int n ;
    cout << "Enter the number of elemnt: ";
    cin >> n ;
    a.getdata(n);
    a.add();
    return 0;
}

===============================================================================================================================

// pointer within class 
#include<iostream>
using namespace std;
class Array {
    int *arr;
    int size;
    public:
    // here we are accessing the elemnts using pointers within a class 
    void getdata(int n){
        size  = n ;
        arr = new int (size);
        cout << "enetr elemnts: " ;
        for(int i = 0 ; i < size ; i++){
            cin >> *(arr+i);
            
        }
    }
    void add(){
        int sum = 0 ;
        for(int i = 0 ; i <  size ; i++){
            sum += *(arr+i);
        }
        cout << "sum of elemnts: " << sum << endl;
    }
};
int main(){
    Array a;
    Array *ptr;
    int n ;
    cout << "Enter the number of elemnt: ";
    cin >> n ;
    a.getdata(n);
    a.add();
    ptr = &a ;
    ptr -> getdata(n);
    ptr -> add();
    
    return 0;
}

=========================================================================================================================================

// pointer to an member 
#include<iostream>
using namespace std;
class X {
    public:
    int a;
    void f(int b){
        cout << "THe value of b is: " << b << endl;
    }
    
};
int main(){
    // pointer to data member 
    int X :: *ptiptr = &X :: a;
    // pointer to member function 
    void (X :: *ptfptr)(int) = &X :: f;
    
    // creating an aobject 
    X xobj;
    
    // data meber initialize
    xobj.*ptiptr = 10;
    cout << "The value of a is :" << xobj.*ptiptr << endl;
    // member function call
    (xobj.*ptfptr)(20);
}


=======================================================================================================

// this pointer 
#include<iostream>
using namespace std;
class X {
    private:
    int a;
    public:
    void setdata(int a){
        // this pointer is used to retrive xobj.a
        // 
        this -> a =a ;
    }
    void print(){
        cout << "a = " << a <<  endl;
    }
};
int main(){
    X xobj;
    int a= 5;
    xobj.setdata(a);
    xobj.print();
}
