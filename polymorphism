// base class can point both base and derived but access only common between base and derived class 
// but base calss canot access specific memebers of derived directly 
* base pointer can access member of derived through typecasting. 

#include <iostream>
using namespace std;
class bc{
    public:
    void printbc(){
        cout << "printing in base class\n";
    }
    void show(){
        cout << "show() of base class\n";
    }
};
class dc: public bc{
    public:
    void printdc(){
        cout << "printing in derived class\n";
    }
    void show(){
        cout << "show of derived class" << endl;
    }
};
int main() {
    bc *bptr;
    bc base;
    bptr = &base;
    cout << "bptr points to base object\n";
    bptr->show();
    dc derived;
    bptr = &derived;
    cout << "bptr now points to derived onjects\n";
    bptr->show();
    dc *dptr;
    dptr = &derived;
    cout << "dptr is derived type pointer\n";
    dptr->show();
    dptr->printdc();
    cout << "using ((*dc)bptr)\n";
    ((dc*)bptr)->show();
    ((dc*)bptr)->printdc();
    return 0;
}
=================================================================================================
// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;
class bc{
    public:
    void show(){
        cout << "show() of base class\n";
    }
};
class dc: public bc{
    public:
    void show(){
        cout << "show() of derived class" << endl;
    }
};
int main() {
    bc *bptr;
    bc base;
    bptr = &base;
    cout << "-- early binding--\n";
    cout << "bptr points to base object\n";
    bptr->show();
    dc derived;
    bptr = &derived;
    cout << "bptr now points to derived onjects\n";
    bptr->show();
    ((dc*)bptr)->show();
    return 0;
}
