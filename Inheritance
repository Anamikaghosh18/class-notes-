// Online C++ compiler to run C++ program online
#include <iostream>
#include<string.h>
using namespace std;
class Student{
    private:
    int roll_no;
    protected:
    char section [10];
    public:
    void get_rno(){
        cout << "\n enter the roll no: ";
        cin >> roll_no;
        
    }
    void show_rno(){
        cout << "roll no: " << roll_no;
    }
};
class result:protected Student{
    private:
    float fees;
    public:
    void get_data(){
        get_rno();
        cout << "\n enter fees: " ;
        cin >> fees;
        cout << "enter serction: ";
        cin >> section;
    }
    void display(){
        show_rno();
        cout << "\n fees: " << fees;
        cout << "\n section: " << section;
    }
    
};
int main() {
    result obj1;
    obj1.get_data();
    obj1.display();
    //obj1.get_rno();
    //obj1.show_rno();
    // obj1.roll_no = 78;

    return 0;
}

=========================================================================
// multiple inheritance

#include <iostream>

using namespace std;
class M{
    protected:
        int m;
    public:
        void get_m(int){
        }
    };
    class N{
     protected:
        int n;
     public:
        void get_n(int){
        }
     };
class P:public M , public N{
    public:
        void display(void);
    };
    void M :: get_m(int x){
        m = x;
    }
    void N :: get_n(int y){
        n = y;
    }
    void P :: display(void){
        cout << "m = " << m << endl;
        cout << "n : " << n << endl;
        cout << "m * n = " << m * n << endl;
    }
    int main(){
        P p;
        p.get_m(10);
        p.get_n(5);
        p.display();
    }
    return 0;
}

======================================================================================================
// multilevel inheritance 

// Online C++ compiler to run C++ program online
#include <iostream>

using namespace std;
class M{
    protected:
        int m;
    public:
        void get_m(int){
        }
    };
    class N{
     protected:
        int n;
     public:
        void get_n(int){
        }
     };
class P:public M , public N{
    public:
        void display(void);
    };
    void M :: get_m(int x){
        m = x;
    }
    void N :: get_n(int y){
        n = y;
    }
    void P :: display(void){
        cout << "m = " << m << endl;
        cout << "n : " << n << endl;
        cout << "m * n = " << m * n << endl;
    }
    int main(){
        P p;
        p.get_m(10);
        p.get_n(5);
        p.display();
    }
    return 0;
}
